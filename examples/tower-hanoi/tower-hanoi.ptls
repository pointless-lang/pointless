fn showRow(radius, sym, height)
  padding = " " * (height - radius)
  width = radius * 2 + 1
  padding + sym * width + padding
end

fn showRows(tower, height)
  numBlanks = height - len(tower) + 1
  blanks = [showRow(0, "░", height)] * numBlanks

  rows = tower
    | reverse
    $ showRow("▇", height)

  blanks + rows
end

fn showTowers(towers, height)
  sep = [" "] * (height + 1)
  combined = sep

  for tower in towers do
    rows = showRows(tower, height)

    for index, row in rows do
      combined[index] += row + sep[index]
    end
  end

  clear()
  combined $ print
  sleep(100)
end

height = 6
towers = [span(height, 1), [], []]

fn moveSingle(towers, src, dest)
  towers[dest] |= push(towers[src][-1])
  towers[src] |= List.pop
  showTowers(towers, height)
  towers
end

fn solve(towers, src, dest, depth)
  if depth > 0 then
    tmpIndex = 3 - src - dest
    towers
      | solve(src, tmpIndex, depth - 1)
      | moveSingle(src, dest)
      | solve(tmpIndex, dest, depth - 1)
  else
    towers
  end
end

showTowers(towers, height)
solve(towers, 0, 2, height)
