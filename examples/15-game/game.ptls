fn update(board, key)
  oldInd = List.indexOf(board, "")
  r = Math.floor(oldInd / 4)
  c = oldInd % 4

  match key
    case "left"  then c += 1
    case "right" then c -= 1
    case "up"    then r += 1
    case "down"  then r -= 1
  end

  newInd = Math.clamp(r, 0, 3) * 4 + Math.clamp(c, 0, 3)
  List.swap(board, oldInd, newInd)
end

fn makeBoard()
  board = Rand.shuffle(span(1, 15))
  swaps = 0

  for i in range(15) do
    for j in range(i) do
      if board[i] < board[j] then
        swaps += 1
      end
    end
  end

  if Math.isEven(swaps) then
    board |= List.swap(0, 1)
  end

  [""] + board
end

fn show(board)
  template = "
  ╭────┬────┬────┬────╮
  │ .. │ .. │ .. │ .. │
  ├────┼────┼────┼────┤
  │ .. │ .. │ .. │ .. │
  ├────┼────┼────┼────┤
  │ .. │ .. │ .. │ .. │
  ├────┼────┼────┼────┤
  │ .. │ .. │ .. │ .. │
  ╰────┴────┴────┴────╯
  "

  for cell in board do
    padded = Str.padLeft(cell, 2)
    template |= Str.replaceN("..", padded, 1)
  end

  clear()
  print(template)
end

solved = span(1, 15) + [""]

fn play()
  board = makeBoard()
  show(board)

  while board != solved do    
    board |= update(Console.rawKey().name)
    show(board)
  end
end

play()
